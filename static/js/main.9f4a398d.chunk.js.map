{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/appi.jsx","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","target","MoviesList","movies","map","movie","key","imdbId","FindMovie","setMovies","useState","value","setVelue","setMovie","response","setResponse","exists","setExists","useEffect","findMovie","event","url","preventDefault","fetch","then","json","film","Response","Title","Plot","Poster","imdbID","onSubmit","htmlFor","type","id","placeholder","classNames","onChange","onClick","find","toLowerCase","includes","App","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f4a398d.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl} target=\"blank\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { allMovies } from '../../api/appi';\n\nimport { MovieCard } from '../MovieCard';\n\nexport const FindMovie = ({ movies, setMovies }) => {\n  const [value, setVelue] = useState('');\n  const [movie, setMovie] = useState(null);\n  const [response, setResponse] = useState(true);\n  const [exists, setExists] = useState(false);\n\n  useEffect(() => {\n  });\n\n  const findMovie = (event) => {\n    event.preventDefault();\n    allMovies(value)\n      .then(film => (\n        film.Response === 'False'\n          ? (setResponse(false) && setMovie(null))\n          : (\n            setMovie({\n              title: film.Title,\n              description: film.Plot,\n              imgUrl: film.Poster,\n              imdbUrl: `https://www.imdb.com/title/${film.imdbID}`,\n              imdbId: film.imdbID,\n              Response: film.Response,\n            }),\n            setResponse(true)\n          )\n      ));\n  };\n\n  const addMOvie = () => {\n    if (movie && !movies.find(film => film.imdbId === movie.imdbId)) {\n      setMovies([...movies, movie]);\n      setMovie(null);\n      setVelue('');\n      setExists(false);\n    }\n\n    if (movie && movies.find(film => film.imdbId === movie.imdbId)) {\n      setExists(true);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={findMovie}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            {`Movie title ${value}`}\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': !response || exists,\n              })}\n              onChange={({ target }) => {\n                setVelue(target.value);\n                setResponse(true);\n                setExists(false);\n              }}\n              value={value}\n\n            />\n          </div>\n          { exists && (\n            <p className=\"help is-danger\">\n              The movie already exists\n            </p>\n          )}\n          { !response && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={addMOvie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n      {movie && movie.title.toLowerCase().includes(value.toLowerCase()) && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard key={movie.imdbId} {...movie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setMovies: PropTypes.func.isRequired,\n};\n","\nconst API_URL = 'https://www.omdbapi.com/?apikey=bdd9d5ee&t=';\n\nexport function allMovies(url) {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie movies={movies} setMovies={setMovies} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}